name: Release

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    name: Check Version
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: |
            bash -o pipefail -c "poetry version | awk '{ print \$2 }'"

      - name: Bump version for developmental release
        if: "! steps.check-version.outputs.tag"
        run: |
          poetry version patch &&
          version=$(poetry version | awk '{ print $2 }') &&
          poetry version $version.dev.$(date +%s)

  build_wheels_linux:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cibw_build: ["cp39-*", "cp310-*", "cp311-*"]
        cibw_archs: ["x86_64", "i686", "aarch64", "ppc64le"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        if: matrix.cibw_archs != 'x86_64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # - name: Install Dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -q --no-install-recommends --no-install-suggests libhts-dev  libssl-dev

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.3
        env:
          CIBW_BEFORE_ALL: apt-get update && apt-get install -q --no-install-recommends --no-install-suggests libhts-dev  libssl-dev
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests

      - uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  build_wheels_macos:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cibw_build: ["cp39-*", "cp310-*", "cp311-*", "cp312-*"]
        cibw_archs: ["x86_64"]
    env:
      SYSTEM_VERSION_COMPAT: 0 # https://github.com/actions/setup-python/issues/469#issuecomment-1192522949
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Configure Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Dependencies
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1 # Do not run brew cleanup automatically.
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1 # Do not automatically update packages.

        run: |
          brew install htslib
          brew install openssl@3
          ln -sf  $(brew --prefix openssl)/include/openssl /usr/local/include/openssl
          ln -sf  $(brew --prefix openssl)/lib/*a /usr/local/lib/
          ln -sf  $(brew --prefix openssl)/lib/*dylib /usr/local/lib/

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests

      - uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  upload_to_pypi:
    needs: ["release", "build_wheels_linux", "build_wheels_macos"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3

      - name: Publish package on PyPI
        if: needs.release.check-version.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.8.10
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true

      - name: Publish package on TestPyPI
        if: "! needs.release.check-version.outputs.tag"
        uses: pypa/gh-action-pypi-publish@v1.8.10
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v5.25.0
        with:
          publish: ${{ steps.check-version.outputs.tag != '' }}
          tag: ${{ steps.check-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
